openapi: 3.0.3
info:
  title: サブスクリプション学習サイト API
  description: オンライン学習プラットフォームのAPI仕様書
  version: 1.0.0
  contact:
    name: API Support
    email: support@learning-site.com

servers:
  - url: https://api.learning-site.com/v1
    description: 本番環境
  - url: https://staging-api.learning-site.com/v1
    description: ステージング環境
  - url: http://localhost:3000/v1
    description: ローカル開発環境

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "田中太郎"
        email:
          type: string
          format: email
          example: "tanaka@example.com"
        avatar_url:
          type: string
          nullable: true
          example: "https://s3.amazonaws.com/avatars/user1.jpg"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_login_at:
          type: string
          format: date-time
          nullable: true
        is_active:
          type: boolean
          example: true
        email_verified:
          type: boolean
          example: true
      required:
        - id
        - name
        - email
        - created_at
        - updated_at
        - is_active
        - email_verified

    Course:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "React基礎コース"
        description:
          type: string
          example: "Reactの基礎から応用まで学べるコース"
        category_id:
          type: integer
          example: 1
        category_name:
          type: string
          example: "プログラミング"
        difficulty:
          type: string
          enum: [Beginner, Intermediate, Advanced]
          example: "Beginner"
        thumbnail_url:
          type: string
          example: "https://s3.amazonaws.com/thumbnails/course1.jpg"
        video_url:
          type: string
          example: "https://s3.amazonaws.com/videos/course1.mp4"
        is_premium:
          type: boolean
          example: true
        status:
          type: string
          enum: [published, draft, archived]
          example: "published"
        estimated_duration_minutes:
          type: integer
          example: 120
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - title
        - description
        - category_id
        - difficulty
        - is_premium
        - status

    Quiz:
      type: object
      properties:
        id:
          type: integer
          example: 1
        course_id:
          type: integer
          example: 1
        title:
          type: string
          example: "React基礎テスト"
        description:
          type: string
          example: "Reactの基礎知識をテストします"
        time_limit_minutes:
          type: integer
          example: 30
        passing_score_percentage:
          type: integer
          example: 70
        status:
          type: string
          enum: [active, inactive]
          example: "active"
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuizQuestion'

    QuizQuestion:
      type: object
      properties:
        id:
          type: integer
        question_text:
          type: string
        question_type:
          type: string
          enum: [multiple_choice, true_false]
        options:
          type: array
          items:
            $ref: '#/components/schemas/QuizOption'

    QuizOption:
      type: object
      properties:
        id:
          type: integer
        option_text:
          type: string
        is_correct:
          type: boolean

    SubscriptionPlan:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "プレミアムプラン"
        description:
          type: string
          example: "すべてのコースにアクセス可能"
        price_monthly:
          type: integer
          example: 1480
        price_yearly:
          type: integer
          example: 14800
        features:
          type: array
          items:
            type: string
          example: ["全コース視聴", "進捗管理", "クイズ機能", "修了証書"]
        is_active:
          type: boolean
          example: true

    UserProgress:
      type: object
      properties:
        course_id:
          type: integer
        progress_percentage:
          type: integer
          example: 65
        current_video_id:
          type: integer
          nullable: true
        started_at:
          type: string
          format: date-time
        last_accessed_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
          nullable: true

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

paths:
  # 認証関連
  /auth/register:
    post:
      tags:
        - 認証
      summary: ユーザー登録
      description: 新規ユーザーの登録を行います
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "田中太郎"
                email:
                  type: string
                  format: email
                  example: "tanaka@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "password123"
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: ユーザー登録成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - 認証
      summary: ユーザーログイン
      description: ユーザーのログインを行います
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "tanaka@example.com"
                password:
                  type: string
                  example: "password123"
              required:
                - email
                - password
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '401':
          description: 認証失敗

  /auth/logout:
    post:
      tags:
        - 認証
      summary: ログアウト
      description: ユーザーのログアウトを行います
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ログアウト成功

  /auth/password/reset:
    post:
      tags:
        - 認証
      summary: パスワードリセット要求
      description: パスワードリセットのメールを送信します
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "tanaka@example.com"
              required:
                - email
      responses:
        '200':
          description: リセットメール送信成功

  /auth/password/reset/confirm:
    post:
      tags:
        - 認証
      summary: パスワードリセット実行
      description: リセットトークンを使用してパスワードを再設定します
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "reset_token_123"
                new_password:
                  type: string
                  minLength: 8
                  example: "newpassword123"
              required:
                - token
                - new_password
      responses:
        '200':
          description: パスワードリセット成功

  # ユーザー関連
  /users/profile:
    get:
      tags:
        - ユーザー
      summary: プロフィール取得
      description: 現在のユーザーのプロフィール情報を取得します
      security:
        - BearerAuth: []
      responses:
        '200':
          description: プロフィール取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags:
        - ユーザー
      summary: プロフィール更新
      description: ユーザーのプロフィール情報を更新します
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: プロフィール更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/avatar:
    post:
      tags:
        - ユーザー
      summary: アバター画像アップロード
      description: ユーザーのアバター画像をアップロードします
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: アバター画像ファイル
      responses:
        '200':
          description: アバターアップロード成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatar_url:
                    type: string

  /users/password:
    put:
      tags:
        - ユーザー
      summary: パスワード変更
      description: ユーザーのパスワードを変更します
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  example: "currentpassword123"
                new_password:
                  type: string
                  minLength: 8
                  example: "newpassword123"
              required:
                - current_password
                - new_password
      responses:
        '200':
          description: パスワード変更成功

  /users/progress:
    get:
      tags:
        - ユーザー
      summary: 学習進捗取得
      description: ユーザーの学習進捗を取得します
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 進捗取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProgress'

  # コース関連
  /courses:
    get:
      tags:
        - コース
      summary: コース一覧取得
      description: コースの一覧を取得します
      parameters:
        - name: category
          in: query
          schema:
            type: string
          description: カテゴリでフィルタリング
        - name: difficulty
          in: query
          schema:
            type: string
            enum: [Beginner, Intermediate, Advanced]
          description: 難易度でフィルタリング
        - name: is_premium
          in: query
          schema:
            type: boolean
          description: プレミアムコースでフィルタリング
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: ページ番号
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: 1ページあたりの件数
      responses:
        '200':
          description: コース一覧取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  courses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
                  pagination:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer

  /courses/{courseId}:
    get:
      tags:
        - コース
      summary: コース詳細取得
      description: 指定されたコースの詳細情報を取得します
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
          description: コースID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: コース詳細取得成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Course'
                  - type: object
                    properties:
                      user_progress:
                        $ref: '#/components/schemas/UserProgress'
                        nullable: true

  /courses/{courseId}/progress:
    put:
      tags:
        - コース
      summary: 学習進捗更新
      description: コースの学習進捗を更新します
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
          description: コースID
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_video_id:
                  type: integer
                  description: 現在視聴中の動画ID
                watched_seconds:
                  type: integer
                  description: 視聴済み秒数
                is_completed:
                  type: boolean
                  description: 完了フラグ
      responses:
        '200':
          description: 進捗更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProgress'

  # クイズ関連
  /courses/{courseId}/quiz:
    get:
      tags:
        - クイズ
      summary: クイズ取得
      description: 指定されたコースのクイズを取得します
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: クイズ取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'

  /quizzes/{quizId}/submit:
    post:
      tags:
        - クイズ
      summary: クイズ回答送信
      description: クイズの回答を送信し、結果を取得します
      parameters:
        - name: quizId
          in: path
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answers:
                  type: array
                  items:
                    type: object
                    properties:
                      question_id:
                        type: integer
                      selected_option_id:
                        type: integer
              required:
                - answers
      responses:
        '200':
          description: クイズ結果取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  score:
                    type: integer
                  total_questions:
                    type: integer
                  correct_answers:
                    type: integer
                  is_passed:
                    type: boolean
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        question_id:
                          type: integer
                        is_correct:
                          type: boolean
                        correct_answer:
                          type: integer

  # 決済関連
  /subscription/plans:
    get:
      tags:
        - 決済
      summary: サブスクリプションプラン取得
      description: 利用可能なサブスクリプションプランを取得します
      responses:
        '200':
          description: プラン取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionPlan'

  /subscription/subscribe:
    post:
      tags:
        - 決済
      summary: サブスクリプション開始
      description: サブスクリプションプランに加入します
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plan_id:
                  type: integer
                payment_method_id:
                  type: string
                  description: Stripeの支払い方法ID
              required:
                - plan_id
                - payment_method_id
      responses:
        '200':
          description: サブスクリプション開始成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscription_id:
                    type: string
                  status:
                    type: string
                    enum: [active, pending, cancelled]

  /subscription/cancel:
    post:
      tags:
        - 決済
      summary: サブスクリプション解約
      description: 現在のサブスクリプションを解約します
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 解約成功

  /subscription/change-plan:
    post:
      tags:
        - 決済
      summary: プラン変更
      description: サブスクリプションプランを変更します
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_plan_id:
                  type: integer
              required:
                - new_plan_id
      responses:
        '200':
          description: プラン変更成功

  # 管理者関連
  /admin/dashboard:
    get:
      tags:
        - 管理者
      summary: 管理者ダッシュボード
      description: 管理者用の統計情報を取得します
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ダッシュボード取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_users:
                    type: integer
                  total_courses:
                    type: integer
                  active_subscriptions:
                    type: integer
                  total_revenue:
                    type: integer
                  monthly_growth:
                    type: number

  /admin/users:
    get:
      tags:
        - 管理者
      summary: ユーザー一覧取得（管理者用）
      description: 管理者がユーザー一覧を取得します
      security:
        - BearerAuth: []
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: 検索キーワード
        - name: status
          in: query
          schema:
            type: string
            enum: [all, active, inactive, cancelled]
          description: ステータスでフィルタリング
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: ページ番号
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: 1ページあたりの件数
      responses:
        '200':
          description: ユーザー一覧取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer

  /admin/users/{userId}:
    get:
      tags:
        - 管理者
      summary: ユーザー詳細取得（管理者用）
      description: 管理者が特定ユーザーの詳細情報を取得します
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ユーザーID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ユーザー詳細取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags:
        - 管理者
      summary: ユーザー情報更新（管理者用）
      description: 管理者がユーザー情報を更新します
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ユーザーID
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                is_active:
                  type: boolean
      responses:
        '200':
          description: ユーザー更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      tags:
        - 管理者
      summary: ユーザー削除（管理者用）
      description: 管理者がユーザーを論理削除します
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ユーザーID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: ユーザー削除成功

  /admin/courses:
    get:
      tags:
        - 管理者
      summary: コース一覧取得（管理者用）
      description: 管理者がコース一覧を取得します
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [all, published, draft, archived]
          description: ステータスでフィルタリング
        - name: search
          in: query
          schema:
            type: string
          description: 検索キーワード
      responses:
        '200':
          description: コース一覧取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'

    post:
      tags:
        - 管理者
      summary: コース作成（管理者用）
      description: 管理者が新しいコースを作成します
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                category_id:
                  type: integer
                difficulty:
                  type: string
                  enum: [Beginner, Intermediate, Advanced]
                is_premium:
                  type: boolean
                status:
                  type: string
                  enum: [published, draft, archived]
                estimated_duration_minutes:
                  type: integer
              required:
                - title
                - description
                - category_id
                - difficulty
                - is_premium
      responses:
        '201':
          description: コース作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'

  /admin/courses/{courseId}:
    get:
      tags:
        - 管理者
      summary: コース詳細取得（管理者用）
      description: 管理者が特定コースの詳細情報を取得します
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
          description: コースID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: コース詳細取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'

    put:
      tags:
        - 管理者
      summary: コース更新（管理者用）
      description: 管理者がコース情報を更新します
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
          description: コースID
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                category_id:
                  type: integer
                difficulty:
                  type: string
                  enum: [Beginner, Intermediate, Advanced]
                is_premium:
                  type: boolean
                status:
                  type: string
                  enum: [published, draft, archived]
                estimated_duration_minutes:
                  type: integer
      responses:
        '200':
          description: コース更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'

    delete:
      tags:
        - 管理者
      summary: コース削除（管理者用）
      description: 管理者がコースを論理削除します
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
          description: コースID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: コース削除成功

  /admin/quizzes:
    get:
      tags:
        - 管理者
      summary: クイズ一覧取得（管理者用）
      description: 管理者がクイズ一覧を取得します
      security:
        - BearerAuth: []
      responses:
        '200':
          description: クイズ一覧取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quiz'

    post:
      tags:
        - 管理者
      summary: クイズ作成（管理者用）
      description: 管理者が新しいクイズを作成します
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                title:
                  type: string
                description:
                  type: string
                time_limit_minutes:
                  type: integer
                passing_score_percentage:
                  type: integer
                questions:
                  type: array
                  items:
                    type: object
                    properties:
                      question_text:
                        type: string
                      question_type:
                        type: string
                        enum: [multiple_choice, true_false]
                      options:
                        type: array
                        items:
                          type: object
                          properties:
                            option_text:
                              type: string
                            is_correct:
                              type: boolean
              required:
                - course_id
                - title
                - questions
      responses:
        '201':
          description: クイズ作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'

  /admin/quizzes/{quizId}:
    put:
      tags:
        - 管理者
      summary: クイズ更新（管理者用）
      description: 管理者がクイズ情報を更新します
      parameters:
        - name: quizId
          in: path
          required: true
          schema:
            type: integer
          description: クイズID
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                time_limit_minutes:
                  type: integer
                passing_score_percentage:
                  type: integer
                status:
                  type: string
                  enum: [active, inactive]
                questions:
                  type: array
                  items:
                    type: object
                    properties:
                      question_text:
                        type: string
                      question_type:
                        type: string
                        enum: [multiple_choice, true_false]
                      options:
                        type: array
                        items:
                          type: object
                          properties:
                            option_text:
                              type: string
                            is_correct:
                              type: boolean
      responses:
        '200':
          description: クイズ更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'

    delete:
      tags:
        - 管理者
      summary: クイズ削除（管理者用）
      description: 管理者がクイズを論理削除します
      parameters:
        - name: quizId
          in: path
          required: true
          schema:
            type: integer
          description: クイズID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: クイズ削除成功

tags:
  - name: 認証
    description: ユーザー認証関連のAPI
  - name: ユーザー
    description: ユーザー情報・進捗管理のAPI
  - name: コース
    description: コース管理・閲覧のAPI
  - name: クイズ
    description: クイズ受験・結果管理のAPI
  - name: 決済
    description: サブスクリプション・決済のAPI
  - name: 管理者
    description: 管理者専用のAPI
